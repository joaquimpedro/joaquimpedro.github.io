---
layout: post
title:  "Using will_paginate with Semantic-ui!"
date:   2014-05-26 17:18
categories: rails semantic-ui
description: "How to change html generated by will_paginate to work with semantic-ui"
---

Hy guys,

In this post we will learn how to use will_paginate and Semantic-ui

Download the <a href="https://github.com/joaquimpedro/willpaginate-semantic-ui" target="_blank">project in github</a> for an exemple complete.

 <ol class="ui list">
    <li>We need to have installed will_paginate and semanti-ui in you rails project</li>
    <li>Create an override of WillPaginate::ActionView::LinkRenderer like the example below:</li>
{% highlight ruby %}
class PaginationRenderer < WillPaginate::ActionView::LinkRenderer

ELLIPSIS = "&hellip;"

def to_html
list_items = pagination.map do |item|
case item
when Fixnum
page_number(item)
else
send(item)
end
end.join(@options[:link_separator])

tag("div", list_items, class: 'ui pagination menu')
end

def container_attributes
super.except(*[:link_options])
end

protected

def page_number(page)
link_options = @options[:link_options] || {}

if page == current_page
tag("a", page, class: "active item")
else
link(page, page, link_options.merge(rel: rel_value(page), class: "item"))
end
end

def previous_or_next_page(page, text, classname)
link_options = @options[:link_options] || {}

if page
link("<i class='" + classname + " arrow icon'></i>", page, link_options.merge(class: "icon item"))
else
link("<i class='" + classname + " arrow icon'></i>", page, link_options.merge(class: "icon item disabled"))
tag("li", tag("span", text), class: "%s disabled" % classname)
end
end

def gap
tag("li", link(ELLIPSIS, "#"), class: "disabled")
end

def previous_page
num = @collection.current_page > 1 && @collection.current_page - 1
previous_or_next_page(num, @options[:previous_label], "left")
end

def next_page
num = @collection.current_page < @collection.total_pages && @collection.current_page + 1
previous_or_next_page(num, @options[:next_label], "right")
end

def ul_class
["pagination", @options[:class]].compact.join(" ")
end

end
{% endhighlight %}

    <li>Now you can perform a pagineted query: </li>
{% highlight ruby %}
# :per_page specify the number of items
@yourList = List.all.paginate(:page => params[:page], :per_page => 5)
{% endhighlight %}

    <li>Now you can render pages link in view specifying the custom renderer:</li>
{% highlight ruby %}
<%= will_paginate @yourList, :renderer => PaginationRenderer %>
{% endhighlight %}
 </ol>
 



[jekyll-gh]: https://github.com/mojombo/jekyll
[jekyll]:    http://jekyllrb.com
